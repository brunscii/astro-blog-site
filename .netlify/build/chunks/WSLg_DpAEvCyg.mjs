import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_ogrvkZIj.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h1 id=\"what-is-wslg\">What is WSLg</h1>\n<p>If you are unfamiliar with WSL then might I suggest that you start with my previous post <a href=\"../wsl\">here</a></p>\n<p>WSL has changed a lot over it’s short life. When it first came out it only worked for <strong>CLI</strong>, or <strong>C</strong>ommand <strong>L</strong>ine <strong>I</strong>nterface, programs. Since then there have been advancements allowing graphical linux apps that use X11 or Wayland to run on windows. This is thanks to something called <a href=\"https://github.com/microsoft/wslg\">WSLg</a>. <em>I remember when WSLg first came out you had to download it separate from WSL, now it is an included feature.</em></p>\n<p>If you have a WSL distro from before WSLg then you can update your distro. First thing is to switch to version 2 of WSL for the distro if you haven’t already.</p>\n<blockquote>\n<p><code>wsl --set-version &#x3C;distro> 2</code></p>\n</blockquote>\n<p>Next you update the distro using <code>wsl --update &#x3C;distro></code></p>\n<h1 id=\"installing-wslg-apps\">Installing WSLg apps</h1>\n<p>Now it’s as simple as installing X11 or Wayland apps on your WSL distro. The people at microsoft have worked hard to make WSLg a built in part of WSL.</p>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"x11-apps\">x11-apps</h3>\n<p>We can install the x11 apps fron the terminal like so:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>sudp apt install x11-apps</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>Whats in the x11-apps package? Well, let’s take a look.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>dpkg -L x11-apps</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>gives us the following</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span>/usr/bin/atobm</span></span>\n<span class=\"line\"><span>/usr/bin/bitmap</span></span>\n<span class=\"line\"><span>/usr/bin/bmtoa</span></span>\n<span class=\"line\"><span>/usr/bin/ico</span></span>\n<span class=\"line\"><span>/usr/bin/oclock</span></span>\n<span class=\"line\"><span>/usr/bin/rendercheck</span></span>\n<span class=\"line\"><span>/usr/bin/transset</span></span>\n<span class=\"line\"><span>/usr/bin/x11perf</span></span>\n<span class=\"line\"><span>/usr/bin/x11perfcomp</span></span>\n<span class=\"line\"><span>/usr/bin/xbiff</span></span>\n<span class=\"line\"><span>/usr/bin/xcalc</span></span>\n<span class=\"line\"><span>/usr/bin/xclipboard</span></span>\n<span class=\"line\"><span>/usr/bin/xclock</span></span>\n<span class=\"line\"><span>/usr/bin/xconsole</span></span>\n<span class=\"line\"><span>/usr/bin/xcursorgen</span></span>\n<span class=\"line\"><span>/usr/bin/xcutsel</span></span>\n<span class=\"line\"><span>/usr/bin/xditview</span></span>\n<span class=\"line\"><span>/usr/bin/xedit</span></span>\n<span class=\"line\"><span>/usr/bin/xeyes</span></span>\n<span class=\"line\"><span>/usr/bin/xgc</span></span>\n<span class=\"line\"><span>/usr/bin/xload</span></span>\n<span class=\"line\"><span>/usr/bin/xlogo</span></span>\n<span class=\"line\"><span>/usr/bin/xmag</span></span>\n<span class=\"line\"><span>/usr/bin/xman</span></span>\n<span class=\"line\"><span>/usr/bin/xmore</span></span>\n<span class=\"line\"><span>/usr/bin/xwd</span></span>\n<span class=\"line\"><span>/usr/bin/xwud</span></span>\n<span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<blockquote>\n<p>Speculatory side note:</p>\n<p><em>So we can run xcalc on windows. Why, you might ask. It’s not about running an uglier calculator on windows. This represents a proof of concept that demonstrates linux applicaitons running in windows. This is something I have wanted since I learned linux in 2008. Yes you could run a VM, but that’s extra overhead on your computer. Being able to run linux and now android apps in windows means a unified space for developers. We have seen how certain game console failed because they were challenging to develop for. This added feature means an evnironment that can be used to develop for other environments. We have seen a massive shift in developers moving to linux thanks to it’s build in tools, ease of use for networking and many other features, a powerful command line, and it being open. If windows can become a decent development environment then maybe they’ll win back the devs. VS Code was a good start.</em></p>\n</blockquote>\n<p>Let’s try something more useful than these basic utility apps shall we.</p>\n<h3 id=\"firefox\">Firefox</h3>\n<p>Everyone that’s familiar with computers should be familiar with firefox. Mozilla, the company behind firefox, offers one of the best resources for web developers, the MDN. The Mozilla Developer Network is a free set of documentation for javascript, HTML, CSS, web API’s and more.</p>\n<p>Firefox itself may have seen better days usage-wise, but it is still a very capable browser and is often times the default for many linux distos.</p>\n<p>Maybe you are tired of all of your browsers having 20-50 tabs open, or maybe you like a little extra privacy. Whatever the case we can install and run firefox through WSLg quickly and easily.</p>\n<p>On Debian systems</p>\n<blockquote>\n<p><code>sudo apt install firefox-esr -y</code></p>\n</blockquote>\n<p>So it’s installed on our Debian WSL, now what?</p>\n<p>Simple, just run it. You should get something like this.</p>\n<p><img src=\"/public/blogContent/wsl/firefox-esr-debian-wsl.png\" alt=\"firefox\"></p>\n<p>Sure the windows theme is lost a bit with wslg, but it is a running version of a debian build of firefox on windows. That in itself, is impressive.</p>\n<p><em>I remeber learning about VM’s and thinking it was the coolest thing 15+ years ago. This would have blown my mind back then</em></p>\n<p>So why run a linux version of Wirefox on Windows? Testing.\r\nIt’s good to be able to test your web apps on multiple platforms.\r\nI’m sure there are other reasons, such as security, but that’s a different aricle right there.</p>\n<h2 id=\"real-uses\">Real uses</h2>\n<p>To be honest I haven’t really felt the need to use WSLg, at least not for more than playing around.\r\nWhile it is amazing technology, and I’m happy to see it around, I can just VNC into a VM on my Linux server.\r\nI’m sure not everyone has a server running on their network so WSLg makes sense for the layman, right?\r\nSure, that’s one way of looking at it.\r\nIf I’m on the go and only have my laptop, or am at a workstation somewhere else, then I have the ability to run Linux native GUI apps in Windows without spinning up a VM.</p>\n<p>It is a matter of preference whether you would run a WSLg app or just run Windows in a VM.\r\nIn my personal experience the latter is the better opeion for power efficiency, security, and speed.\r\nI even have an image of Windows 7 that I run on my server every once in a while that use to run baremetal on that server.\r\nThe boot time, load speeds, and overall telemetry efficiency is greatly improved from running in the VM.\r\nWhen it ran baremetal it could take up to 5 minutes to boot, would hand on tasks, and felt much older than it was.\r\nIn the VM however, it boots in 20 or so seconds and is a smooth operator.\r\nThis is using an image of the disk that had previously been the boot drive, and is stored on a slower HDD.</p>\n<p>On Windows WSLg github <a href=\"https://github.com/microsoft/wslg\">page</a> they show the Linux versions of Visual Studio Code, Chrome, xClock, and xCalc. Is this useful? No, not really. All of these have Windows versions that will probably run better in Windows tham the WSLg versions.</p>\n<p>The practicallity of WSLg is being able to run Linux GUIs on windows without having to</p>\n<ul>\n<li>Set up a VM</li>\n<li>VNC into an existing system</li>\n<li>Run Windows in a VM in Linux and just use the native apps</li>\n<li>Dual Boot</li>\n<li>Install a Windows version of the same app</li>\n</ul>\n<p>Overall this is a big win for Windows users and Linux users alike as we are bringing Linux into the foreground on Windows.</p>";

				const frontmatter = {"title":"WSLg","description":"Windows Subsystems for Linux GUI","category":"WSL"};
				const file = "C:/Users/meatw/source/repos/brunscii/astro-blog-site/src/content/blog/APlusTerms/Windows/wsl/WSLg.md";
				const url = undefined;
				function rawContent() {
					return "\r\n# What is WSLg\r\n\r\nIf you are unfamiliar with WSL then might I suggest that you start with my previous post [here](../wsl)\r\n\r\nWSL has changed a lot over it's short life. When it first came out it only worked for **CLI**, or **C**ommand **L**ine **I**nterface, programs. Since then there have been advancements allowing graphical linux apps that use X11 or Wayland to run on windows. This is thanks to something called [WSLg](https://github.com/microsoft/wslg). *I remember when WSLg first came out you had to download it separate from WSL, now it is an included feature.*\r\n\r\nIf you have a WSL distro from before WSLg then you can update your distro. First thing is to switch to version 2 of WSL for the distro if you haven't already.\r\n> `wsl --set-version <distro> 2`\r\n\r\nNext you update the distro using `wsl --update <distro>`\r\n\r\n# Installing WSLg apps\r\n\r\nNow it's as simple as installing X11 or Wayland apps on your WSL distro. The people at microsoft have worked hard to make WSLg a built in part of WSL. \r\n\r\n## Examples\r\n\r\n### x11-apps\r\nWe can install the x11 apps fron the terminal like so:\r\n\r\n```\r\nsudp apt install x11-apps\r\n```\r\n\r\nWhats in the x11-apps package? Well, let's take a look.\r\n\r\n    dpkg -L x11-apps\r\n\r\ngives us the following\r\n    \r\n    ...\r\n    /usr/bin/atobm\r\n    /usr/bin/bitmap\r\n    /usr/bin/bmtoa\r\n    /usr/bin/ico\r\n    /usr/bin/oclock\r\n    /usr/bin/rendercheck\r\n    /usr/bin/transset\r\n    /usr/bin/x11perf\r\n    /usr/bin/x11perfcomp\r\n    /usr/bin/xbiff\r\n    /usr/bin/xcalc\r\n    /usr/bin/xclipboard\r\n    /usr/bin/xclock\r\n    /usr/bin/xconsole\r\n    /usr/bin/xcursorgen\r\n    /usr/bin/xcutsel\r\n    /usr/bin/xditview\r\n    /usr/bin/xedit\r\n    /usr/bin/xeyes\r\n    /usr/bin/xgc\r\n    /usr/bin/xload\r\n    /usr/bin/xlogo\r\n    /usr/bin/xmag\r\n    /usr/bin/xman\r\n    /usr/bin/xmore\r\n    /usr/bin/xwd\r\n    /usr/bin/xwud\r\n    ...\r\n\r\n\r\n\r\n> Speculatory side note:\r\n>\r\n> *So we can run xcalc on windows. Why, you might ask. It's not about running an uglier calculator on windows. This represents a proof of concept that demonstrates linux applicaitons running in windows. This is something I have wanted since I learned linux in 2008. Yes you could run a VM, but that's extra overhead on your computer. Being able to run linux and now android apps in windows means a unified space for developers. We have seen how certain game console failed because they were challenging to develop for. This added feature means an evnironment that can be used to develop for other environments. We have seen a massive shift in developers moving to linux thanks to it's build in tools, ease of use for networking and many other features, a powerful command line, and it being open. If windows can become a decent development environment then maybe they'll win back the devs. VS Code was a good start.*\r\n\r\nLet's try something more useful than these basic utility apps shall we.\r\n\r\n### Firefox\r\n\r\nEveryone that's familiar with computers should be familiar with firefox. Mozilla, the company behind firefox, offers one of the best resources for web developers, the MDN. The Mozilla Developer Network is a free set of documentation for javascript, HTML, CSS, web API's and more. \r\n\r\nFirefox itself may have seen better days usage-wise, but it is still a very capable browser and is often times the default for many linux distos. \r\n\r\nMaybe you are tired of all of your browsers having 20-50 tabs open, or maybe you like a little extra privacy. Whatever the case we can install and run firefox through WSLg quickly and easily.\r\n\r\nOn Debian systems\r\n\r\n> `sudo apt install firefox-esr -y`\r\n\r\nSo it's installed on our Debian WSL, now what?\r\n\r\nSimple, just run it. You should get something like this.\r\n\r\n![firefox](/public/blogContent/wsl/firefox-esr-debian-wsl.png)\r\n\r\n\r\nSure the windows theme is lost a bit with wslg, but it is a running version of a debian build of firefox on windows. That in itself, is impressive. \r\n\r\n*I remeber learning about VM's and thinking it was the coolest thing 15+ years ago. This would have blown my mind back then*\r\n\r\nSo why run a linux version of Wirefox on Windows? Testing. \r\nIt's good to be able to test your web apps on multiple platforms. \r\nI'm sure there are other reasons, such as security, but that's a different aricle right there. \r\n\r\n## Real uses\r\n\r\nTo be honest I haven't really felt the need to use WSLg, at least not for more than playing around. \r\nWhile it is amazing technology, and I'm happy to see it around, I can just VNC into a VM on my Linux server.\r\nI'm sure not everyone has a server running on their network so WSLg makes sense for the layman, right? \r\nSure, that's one way of looking at it. \r\nIf I'm on the go and only have my laptop, or am at a workstation somewhere else, then I have the ability to run Linux native GUI apps in Windows without spinning up a VM.\r\n\r\nIt is a matter of preference whether you would run a WSLg app or just run Windows in a VM. \r\nIn my personal experience the latter is the better opeion for power efficiency, security, and speed.\r\nI even have an image of Windows 7 that I run on my server every once in a while that use to run baremetal on that server. \r\nThe boot time, load speeds, and overall telemetry efficiency is greatly improved from running in the VM.\r\nWhen it ran baremetal it could take up to 5 minutes to boot, would hand on tasks, and felt much older than it was.\r\nIn the VM however, it boots in 20 or so seconds and is a smooth operator.\r\nThis is using an image of the disk that had previously been the boot drive, and is stored on a slower HDD.\r\n\r\nOn Windows WSLg github [page](https://github.com/microsoft/wslg) they show the Linux versions of Visual Studio Code, Chrome, xClock, and xCalc. Is this useful? No, not really. All of these have Windows versions that will probably run better in Windows tham the WSLg versions.\r\n\r\nThe practicallity of WSLg is being able to run Linux GUIs on windows without having to\r\n- Set up a VM\r\n- VNC into an existing system\r\n- Run Windows in a VM in Linux and just use the native apps\r\n- Dual Boot\r\n- Install a Windows version of the same app\r\n\r\nOverall this is a big win for Windows users and Linux users alike as we are bringing Linux into the foreground on Windows. \r\n\r\n\r\n\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"what-is-wslg","text":"What is WSLg"},{"depth":1,"slug":"installing-wslg-apps","text":"Installing WSLg apps"},{"depth":2,"slug":"examples","text":"Examples"},{"depth":3,"slug":"x11-apps","text":"x11-apps"},{"depth":3,"slug":"firefox","text":"Firefox"},{"depth":2,"slug":"real-uses","text":"Real uses"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
