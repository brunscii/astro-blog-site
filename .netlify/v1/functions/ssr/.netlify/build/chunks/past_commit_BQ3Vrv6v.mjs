import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_ogrvkZIj.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h2 id=\"why-commit-to-the-past\">Why commit to the past?</h2>\n<p>There have been times where I have fallen asleep at the desk, or with a laptop on my chest.\r\nIf you code long enough you probably will too. Sometimes we have progress staged but not committed.\r\nMaybe you juse don’t want to miss out on that github green.</p>\n<p>Whatever the case, being able to organize your commits is a useful skill to have.\r\nFortunately it is a trivial task from the command line. Let’s explore te git command.</p>\n<p>Using <code>git commit -help</code> we get the following output.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>usage: git commit [&#x3C;options>] [--] &#x3C;pathspec>...</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    -q, --quiet           suppress summary after successful commit</span></span>\n<span class=\"line\"><span>    -v, --verbose         show diff in commit message template</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Commit message options</span></span>\n<span class=\"line\"><span>    -F, --file &#x3C;file>     read message from file</span></span>\n<span class=\"line\"><span>    --author &#x3C;author>     override author for commit</span></span>\n<span class=\"line\"><span>    --date &#x3C;date>         override date for commit</span></span>\n<span class=\"line\"><span>    -m, --message &#x3C;message></span></span>\n<span class=\"line\"><span>                        commit message</span></span>\n<span class=\"line\"><span>    -c, --reedit-message &#x3C;commit></span></span>\n<span class=\"line\"><span>                        reuse and edit message from specified commit</span></span>\n<span class=\"line\"><span>    -C, --reuse-message &#x3C;commit></span></span>\n<span class=\"line\"><span>                        reuse message from specified commit</span></span>\n<span class=\"line\"><span>    --fixup [(amend|reword):]commit</span></span>\n<span class=\"line\"><span>                        use autosquash formatted message to fixup or amend/reword specified commit</span></span>\n<span class=\"line\"><span>    --squash &#x3C;commit>     use autosquash formatted message to squash specified commit</span></span>\n<span class=\"line\"><span>    --reset-author        the commit is authored by me now (used with -C/-c/--amend)</span></span>\n<span class=\"line\"><span>    --trailer &#x3C;trailer>   add custom trailer(s)</span></span>\n<span class=\"line\"><span>    -s, --signoff         add a Signed-off-by trailer</span></span>\n<span class=\"line\"><span>    -t, --template &#x3C;file></span></span>\n<span class=\"line\"><span>                        use specified template file</span></span>\n<span class=\"line\"><span>    -e, --edit            force edit of commit</span></span>\n<span class=\"line\"><span>    --cleanup &#x3C;mode>      how to strip spaces and #comments from message</span></span>\n<span class=\"line\"><span>    --status              include status in commit message template</span></span>\n<span class=\"line\"><span>    -S, --gpg-sign[=&#x3C;key-id>]</span></span>\n<span class=\"line\"><span>                        GPG sign commit</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Commit contents options</span></span>\n<span class=\"line\"><span>    -a, --all             commit all changed files</span></span>\n<span class=\"line\"><span>    -i, --include         add specified files to index for commit</span></span>\n<span class=\"line\"><span>    --interactive         interactively add files</span></span>\n<span class=\"line\"><span>    -p, --patch           interactively add changes</span></span>\n<span class=\"line\"><span>    -o, --only            commit only specified files</span></span>\n<span class=\"line\"><span>    -n, --no-verify       bypass pre-commit and commit-msg hooks</span></span>\n<span class=\"line\"><span>    --dry-run             show what would be committed</span></span>\n<span class=\"line\"><span>    --short               show status concisely</span></span>\n<span class=\"line\"><span>    --branch              show branch information</span></span>\n<span class=\"line\"><span>    --ahead-behind        compute full ahead/behind values</span></span>\n<span class=\"line\"><span>    --porcelain           machine-readable output</span></span>\n<span class=\"line\"><span>    --long                show status in long format (default)</span></span>\n<span class=\"line\"><span>    -z, --null            terminate entries with NUL</span></span>\n<span class=\"line\"><span>    --amend               amend previous commit</span></span>\n<span class=\"line\"><span>    --no-post-rewrite     bypass post-rewrite hook</span></span>\n<span class=\"line\"><span>    -u, --untracked-files[=&#x3C;mode>]</span></span>\n<span class=\"line\"><span>                        show untracked files, optional modes: all, normal, no. (Default: all)</span></span>\n<span class=\"line\"><span>    --pathspec-from-file &#x3C;file></span></span>\n<span class=\"line\"><span>                        read pathspec from file</span></span>\n<span class=\"line\"><span>    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>There it is. <code>--date &#x3C;date></code> and <code>-m &#x3C;message></code>. All we need to do is make the commit for the specified date and give it a message.</p>\n<p>An example of one could easily be <code>git commit --date \"yesterday\" -m 'fixed button issues'</code>.\r\nYes, that’s right, github allows you to use human readable dates like yesterday.\r\nThis makes it easy if you just staged the changes you made yesterday.</p>";

				const frontmatter = {"title":"How to commit the past","description":"How to make commits for different dates in the command line. Make yesterdays commit today.","pubDate":"Mar, 7, 2023","draft":false,"heroImage":"/public/blogContent/gitPic/gitTime.svg","category":"Tips or Tricks"};
				const file = "C:/Users/meatw/source/repos/brunscii/astro-blog-site/src/content/blog/past_commit.md";
				const url = undefined;
				function rawContent() {
					return "## Why commit to the past?\r\n\r\nThere have been times where I have fallen asleep at the desk, or with a laptop on my chest. \r\nIf you code long enough you probably will too. Sometimes we have progress staged but not committed.\r\nMaybe you juse don't want to miss out on that github green. \r\n\r\nWhatever the case, being able to organize your commits is a useful skill to have.\r\nFortunately it is a trivial task from the command line. Let's explore te git command.\r\n\r\nUsing `git commit -help` we get the following output.\r\n\r\n\r\n\r\n    usage: git commit [<options>] [--] <pathspec>...\r\n\r\n        -q, --quiet           suppress summary after successful commit\r\n        -v, --verbose         show diff in commit message template\r\n\r\n    Commit message options\r\n        -F, --file <file>     read message from file\r\n        --author <author>     override author for commit\r\n        --date <date>         override date for commit\r\n        -m, --message <message>\r\n                            commit message\r\n        -c, --reedit-message <commit>\r\n                            reuse and edit message from specified commit\r\n        -C, --reuse-message <commit>\r\n                            reuse message from specified commit\r\n        --fixup [(amend|reword):]commit\r\n                            use autosquash formatted message to fixup or amend/reword specified commit\r\n        --squash <commit>     use autosquash formatted message to squash specified commit\r\n        --reset-author        the commit is authored by me now (used with -C/-c/--amend)\r\n        --trailer <trailer>   add custom trailer(s)\r\n        -s, --signoff         add a Signed-off-by trailer\r\n        -t, --template <file>\r\n                            use specified template file\r\n        -e, --edit            force edit of commit\r\n        --cleanup <mode>      how to strip spaces and #comments from message\r\n        --status              include status in commit message template\r\n        -S, --gpg-sign[=<key-id>]\r\n                            GPG sign commit\r\n\r\n    Commit contents options\r\n        -a, --all             commit all changed files\r\n        -i, --include         add specified files to index for commit\r\n        --interactive         interactively add files\r\n        -p, --patch           interactively add changes\r\n        -o, --only            commit only specified files\r\n        -n, --no-verify       bypass pre-commit and commit-msg hooks\r\n        --dry-run             show what would be committed\r\n        --short               show status concisely\r\n        --branch              show branch information\r\n        --ahead-behind        compute full ahead/behind values\r\n        --porcelain           machine-readable output\r\n        --long                show status in long format (default)\r\n        -z, --null            terminate entries with NUL\r\n        --amend               amend previous commit\r\n        --no-post-rewrite     bypass post-rewrite hook\r\n        -u, --untracked-files[=<mode>]\r\n                            show untracked files, optional modes: all, normal, no. (Default: all)\r\n        --pathspec-from-file <file>\r\n                            read pathspec from file\r\n        --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character\r\n\r\nThere it is. `--date <date>` and `-m <message>`. All we need to do is make the commit for the specified date and give it a message.\r\n\r\nAn example of one could easily be `git commit --date \"yesterday\" -m 'fixed button issues'`.\r\nYes, that's right, github allows you to use human readable dates like yesterday. \r\nThis makes it easy if you just staged the changes you made yesterday.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"why-commit-to-the-past","text":"Why commit to the past?"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
